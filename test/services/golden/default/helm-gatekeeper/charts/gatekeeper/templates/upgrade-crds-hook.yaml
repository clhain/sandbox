apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    release: foo
    heritage: Helm
  name: gatekeeper-admin-upgrade-crds
  namespace: 'default'
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gatekeeper-admin-upgrade-crds
  labels:
    release: foo
    heritage: Helm
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gatekeeper-admin-upgrade-crds
  labels:
    release: foo
    heritage: Helm
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
subjects:
  - kind: ServiceAccount
    name: gatekeeper-admin-upgrade-crds
    namespace: default
roleRef:
  kind: ClusterRole
  name: gatekeeper-admin-upgrade-crds
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: gatekeeper-update-crds-hook
  namespace: default
  labels:
    app: gatekeeper
    chart: gatekeeper
    gatekeeper.sh/system: "yes"
    heritage: Helm
    release: foo
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
spec:
  backoffLimit: 0
  template:
    metadata:
      name: gatekeeper-update-crds-hook
      annotations:
        {}
      labels:
        app: 'gatekeeper'
        chart: 'gatekeeper'
        gatekeeper.sh/system: "yes"
        heritage: 'Helm'
        release: 'foo'
    spec:
      serviceAccountName: gatekeeper-admin-upgrade-crds
      restartPolicy: Never
      containers:
      - name: crds-upgrade
        image: 'openpolicyagent/gatekeeper-crds:v3.11.0'
        imagePullPolicy: 'IfNotPresent'
        args:
        - apply
        - -f
        - crds/
        resources:
          {}
        securityContext:
          seccompProfile:
            type: RuntimeDefault
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
      affinity:
        {}
      tolerations:
        []
      nodeSelector:
        kubernetes.io/os: linux
