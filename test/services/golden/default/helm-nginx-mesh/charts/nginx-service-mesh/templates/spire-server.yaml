apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
imagePullSecrets:
- name: nginx-mesh-registry-key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-bundle
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
data:
  server.conf: "server {\n  bind_address = \"0.0.0.0\"\n  bind_port = \"8081\"\n  ca_key_type = \"ec-p256\"\n  ca_ttl = \"720h\"\n  data_dir = \"/run/spire/data\"\n  log_level = \"DEBUG\"\n  socket_path = \"/run/spire/sockets/spire-registration.sock\"\n  default_x509_svid_ttl = \"1h\"\n  trust_domain = \"example.org\"\n  ca_subject = {\n    country = [\"US\"],\n    organization = [\"NGINX\"],\n    common_name = \"\",\n  }\n}\n\nplugins {\n  DataStore \"sql\" {\n    plugin_data {\n      database_type = \"sqlite3\"\n      connection_string = \"/run/spire/data/datastore.sqlite3\"\n    }\n  }\n\n  NodeAttestor \"k8s_psat\" {\n    plugin_data {\n      clusters = {\n        \"nginx-mesh\" = {\n          service_account_allow_list = [\"default:spire-agent\"]\n        }\n      }\n    }\n  }\n\n  Notifier \"k8sbundle\" {\n     plugin_data {\n       namespace = \"default\"\n       webhook_label = \"spiffe.io/webhook\"\n       api_service_label = \"spiffe.io/apiservice\"\n     }\n  }\n\n  KeyManager \"disk\" {\n    plugin_data {\n      keys_path = \"/run/spire/data/keys.json\"\n    }\n  }\n\n  \n\n}\n\nhealth_checks {\n  listener_enabled = true\n  bind_address = \"0.0.0.0\"\n  bind_port = \"8082\"\n  live_path = \"/live\"\n  ready_path = \"/ready\"\n}\n"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-workload-registrar
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
data:
  k8s-workload-registrar.conf: "log_level = \"debug\"\ntrust_domain = \"example.org\"\nserver_socket_path = \"/run/spire/sockets/spire-registration.sock\"\ncluster = \"nginx-mesh\"\npod_controller = true\nadd_svc_dns_name = true\nmode = \"crd\"\nwebhook_enabled = true\nwebhook_cert_dir = \"/tmp/k8s-webhook-server/serving-certs\"\nidentity_template_label = \"spiffe.io/spiffeid\"\ndns_name_templates = [\"{{ .Pod.Name}}\", \"{{ .Pod.ServiceAccount }}.{{ .Pod.Namespace }}.svc\"]\n"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-server.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["spire-bundle"]
  verbs: ["get", "patch"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get", "list", "patch", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["get", "list", "patch", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-workload-registrar.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
rules:
- apiGroups: [""]
  resources: ["endpoints", "pods", "nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["spiffeid.spiffe.io"]
  resources: ["spiffeids"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups: ["spiffeid.spiffe.io"]
  resources: ["spiffeids/status"]
  verbs: ["get", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-server.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-server.security.builtin.nsm.nginx
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-workload-registrar.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-workload-registrar.security.builtin.nsm.nginx
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/name: spire-server
    app.kubernetes.io/part-of: nginx-service-mesh
spec:
  ports:
  - name: api
    protocol: TCP
    port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: spire-server
    app.kubernetes.io/part-of: nginx-service-mesh
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-workload-registrar
  labels:
    app.kubernetes.io/name: k8s-workload-registrar
    app.kubernetes.io/part-of: nginx-service-mesh
spec:
  ports:
  - name: webhook
    protocol: TCP
    port: 443
    targetPort: 9443
  selector:
    app.kubernetes.io/name: spire-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/name: spire-server
    app.kubernetes.io/part-of: nginx-service-mesh
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: spire-server
      app.kubernetes.io/part-of: nginx-service-mesh
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spire-server
        app.kubernetes.io/part-of: nginx-service-mesh
    spec:
      serviceAccountName: spire-server
      shareProcessNamespace: true
      containers:
      - name: spire-server
        image: gcr.io/spiffe-io/spire-server:1.5.4
        imagePullPolicy: IfNotPresent
        args:
        - -config
        - /run/spire/config/server.conf
        ports:
        - name: spire-server
          protocol: TCP
          containerPort: 8081
        volumeMounts:
        - name: spire-config
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-server-socket
          mountPath: /run/spire/sockets
          readOnly: false
        livenessProbe:
          httpGet:
            port: 8082
            path: /live
          failureThreshold: 2
          initialDelaySeconds: 15
          periodSeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            port: 8082
            path: /ready
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: k8s-workload-registrar
        image: gcr.io/spiffe-io/k8s-workload-registrar:1.5.4
        imagePullPolicy: IfNotPresent
        args:
        - -config
        - /run/spire/config/k8s-workload-registrar.conf
        ports:
        - name: webhook
          protocol: TCP
          containerPort: 9443
        env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
        - name: k8s-workload-registrar-config
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-server-socket
          mountPath: /run/spire/sockets
          readOnly: true
      volumes:
      - name: spire-config
        configMap:
          name: spire-server
      - name: spire-server-socket
        emptyDir: {}
      - name: k8s-workload-registrar-config
        configMap:
          name: k8s-workload-registrar
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: k8s-workload-registrar.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
    spiffe.io/webhook: "true"
webhooks:
- name: k8s-workload-registrar.default.svc
  clientConfig:
    service:
      name: k8s-workload-registrar
      namespace: default
      path: "/validate-spiffeid-spiffe-io-v1beta1-spiffeid"
  sideEffects: None
  admissionReviewVersions: ["v1"]
  rules:
  - apiGroups: ["spiffeid.spiffe.io"]
    apiVersions: ["v1beta1"]
    operations: ["CREATE", "UPDATE", "DELETE"]
    resources: ["spiffeids"]
    scope: Namespaced
---
