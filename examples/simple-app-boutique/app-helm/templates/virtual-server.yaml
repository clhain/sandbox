apiVersion: k8s.nginx.org/v1
kind: VirtualServer
metadata:
  name: boutique
spec:
  host: "{{ .Values.hostRecordName }}.{{ .Values.hostRecordDomain }}"
  tls:
    cert-manager:
      cluster-issuer: letsencrypt-prod
    secret: boutique-cert
  routes:
  - path: /
    route: default/boutique
    location-snippets: |
      auth_request /oauth2/auth;
      error_page 401 = https://auth.{{ .Values.hostRecordDomain }}/oauth2/start?rd=https://$host$uri;
      auth_request_set $user   $upstream_http_x_auth_request_user;
      auth_request_set $email  $upstream_http_x_auth_request_email;
      auth_request_set $auth_header $upstream_http_authorization;
      auth_request_set $token  $upstream_http_x_auth_request_access_token;
      proxy_set_header X-Access-Token $token;
      auth_request_set $auth_cookie $upstream_http_set_cookie;
      add_header Set-Cookie $auth_cookie;
      proxy_set_header X-Auth-Request-Email "$email";
      proxy_set_header X-Auth-Request-User "$user";
      #proxy_set_header Authorization "$auth_header";
      set $session_id_header $upstream_http_x_auth_request_email;
  - path: /oauth2
    route: oauth-proxy/oauth-proxy-boutique

---
apiVersion: k8s.nginx.org/v1
kind: VirtualServerRoute
metadata:
  name: boutique
spec:
  host: "{{ .Values.hostRecordName }}.{{ .Values.hostRecordDomain }}"
  upstreams:
  - name: boutique
    service: boutique-app-frontend
    port: 8080
  subroutes:
  - path: /
    action:
      pass: boutique

---
apiVersion: k8s.nginx.org/v1
kind: VirtualServerRoute
metadata:
  name: oauth-proxy-boutique
  namespace: oauth-proxy
spec:
  host: "{{ .Values.hostRecordName }}.{{ .Values.hostRecordDomain }}"
  upstreams:
  - name: oauth2-proxy
    service: oauth-proxy-oauth2-proxy
    port: 80
  subroutes:
  - path: /oauth2/auth
    location-snippets: "internal;"
    action:
      pass: oauth2-proxy